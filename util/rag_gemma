
from langchain_community.embeddings import HuggingFaceInstructEmbeddings
from langchain.vectorstores import FAISS
from langchain_community.llms import HuggingFaceHub
from langchain_community.chat_models.huggingface import ChatHuggingFace
from langchain_community.memory import ConversationBufferMemory
from langchain_community.chains import ConversationalRetrievalChain
from langchain_community.chains.question_answering import load_qa_chain
import pandas as pd 
import pickle
import os
import util.log as log 
import base64 



def get_vectorstore(text_chunks):
    log.log_write(f"get_vectorstore ->")
    embeddings = HuggingFaceInstructEmbeddings(model_name = "hkunlp/instructor-xl")      
    vectorstore = FAISS.from_texts(texts=text_chunks, embedding = embeddings)
    log.log_write(f"get_vectorstore <- :: vectorstore")
    return vectorstore

def get_conversation_chain(vectorstore) :
    log.log_write(f"get_conversation_chain -> ")
    memory = ConversationBufferMemory(memory_key = "chat_history", return_messages =True) 
    llm = HuggingFaceHub(repo_id="hkunlp/instructor-xl",
                                 task= "conversational",
                                 model_kwargs={ "temperature":0.5,"max_length":512})
    chat_model = ChatHuggingFace(llm=llm)
    conversation_chain = load_qa_chain(llm=llm, chain_type="stuff")

    log.log_write(f"get_conversation_chain :: conversation_chain = {type(conversation_chain)}")
    return conversation_chain


def main() : 
    pass

if __name__ == "__main__" :
    main()
